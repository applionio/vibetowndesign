## How to Get AI to Re-Write in a Specific Style: Modern Prompt Engineering Best Practices

When an AI responds to your *content* instead of re-writing it in your described *style*, the issue is usually with prompt clarity and structure. Here’s how to fix it using current best practices:

### 1. Separate the Style Description from the Content

- **Explicitly label** the style and the text to be rewritten.
- Use clear delimiters (like triple quotes or markdown code blocks) to distinguish between the style description and the source text.

**Example:**
```
Style: Write in a witty, conversational tone, using short sentences and rhetorical questions.

Text to rewrite:
"""
The weather was bad, so the event was canceled.
"""
```

### 2. Give the AI Clear, Step-by-Step Instructions

- Tell the AI exactly what you want: "Rewrite the following text in the above style."
- Avoid vague instructions like "in this style" without context.

**Prompt Template:**
```
Below is a style description and a text. Rewrite the text to match the style.

Style Description:
[Insert your style description here]

Text:
[Insert the text you want rewritten here]
```

### 3. Use System Prompts or Role Assignments (If Supported)

- For advanced models, start with a system-level prompt: "You are an editor who rewrites text in specified styles."
- This sets the context for the AI before it sees your instructions.

### 4. Test and Iterate

- If the AI still fails, try rephrasing the prompt or making the separation between style and content even more obvious.
- Use bullet points or numbered steps for clarity.

### 5. Use Examples

- Provide a *sample* of the desired style, if possible.
- Show “before” and “after” examples for the AI to mimic.

**Example:**
```
Style Example:
Before: The dog barked loudly.
After: The dog let out a bark that echoed like thunder.

Now, rewrite this:
The cat slept peacefully.
```

## Key Takeaways

- **Explicit labeling and formatting** are crucial.
- **Step-by-step instructions** reduce ambiguity.
- **Examples and role assignments** boost accuracy.
- **Iterate** if the first result isn’t right—prompt engineering is often experimental.

These practices reflect the latest trends in prompt engineering for style transfer and are used by professionals to reliably guide modern large language models.

Sources
